//#CATEGORY "0"
#ENABLE_TRACE
                                        
#CRESTRON_SIMPLSHARP_LIBRARY "SimplPlusPythonAdapter"

#DEFINE_CONSTANT	TRUE						1
#DEFINE_CONSTANT	FALSE						0

#DEFINE_CONSTANT	SUCCESS						0
#DEFINE_CONSTANT	FAILURE						-1

#DEFINE_CONSTANT	STRING_SIZE					250
                                                         
#DEFINE_CONSTANT	PATH						"/user/simpltest.py"
#DEFINE_CONSTANT	ARG1						"arg1"
#DEFINE_CONSTANT	ARG2						"arg2"

#DEFINE_CONSTANT	RUN_BASIC					0
#DEFINE_CONSTANT	RUN_ARGS					1

digital_input Run;
digital_input RunWithArgs;

digital_input Test;

digital_output Supported;

/* Globals */

// Array of PythonModule objects for testing
PythonModule g_PythonModule[RUN_ARGS];

PythonModule pModule;

string g_ID[STRING_SIZE];
integer g_Count;
integer g_LastRunMode;
integer g_ExpectedArgCount[RUN_ARGS];

/* Utility Functions */
                     
//
// Prints PythonModule object information
//
function PrintModule(string header, PythonModule module)
{
	integer i;
	integer count;

	print("%s PythonModule[%s]:\r\n", header, g_ID);
	print("%s UniqueIdentifier = %s\r\n", header, module.UniqueIdentifier);

	if (module.ArgumentCount = 0)
	{
		print("%s Arguments=empty\r\n", header);
	}
	while (i < module.ArgumentCount)
	{
		print("%s Arguments[%d] = %s\r\n", header, i, module.Arguments[i]);
		i = i + 1;
	}

	print("%s File = %s\r\n", header, module.File);
	print("%s State = %s\r\n", header, module.State);
	print("%s StateInformation = %s\r\n", header, module.StateInformation);	
}

/* Functions */
                             
//
// Callback for PythonInterface.DataReceived
//
callback function DataReceivedHandler(PythonModule sender, PythonAdapterDataReceivedEventArgs e)
{
	string s[STRING_SIZE];
	s = "{\"splus\":\"This data sent from S+ DataReceivedHandler\"}";

	PrintModule("DataReceivedHandler:", sender);

	print("e.Data = %s\r\n", e.Data);
                       
	// Can use module instance to pass back data
	sender.SendData(s);
}

//
// Run python script
//
function Run_(integer mode)
{
	StringList args;
	string data[STRING_SIZE];
	integer result;

	data = "{\"splus\":\"This data sent from S+ Run_\"}";

	// Utility provided to generate GUIDs
	g_ID = PythonAdapterUtils.NewGuid;

	// Any arguments must be passed in StringList
	args.Add(ARG1);
	args.Add(ARG2);

	switch (mode)
	{
		case (RUN_BASIC):
		{
			// Must pass reference to existing PythonModule object
			// Path can absolute or relative to program directory
			//PythonModule pModule;
			result = PythonInterface.Run(g_ID, "/user/simpltest.py", pModule);
		}
		case (RUN_ARGS):
		{
			// Overload to pass arguments
			result = PythonInterface.RunWithArgs(g_ID, "/user/simpltest.py", g_PythonModule[mode], args);
		}
	}

	g_LastRunMode = mode;

	if (result = SUCCESS)
	{               
		PrintModule("Run_", g_PythonModule[mode]);          

		// Data can be sent using either instance or static calls
		pModule.SendData(data);

		PythonInterface.SendData(g_ID, data);

	}
	else
	{
		print("FAIL: Run() returned %ld\r\n", result);
	}
}

//
// Runs tests on last executed module
//                
function ModuleTest(PythonModule module)
{	
	integer result;

	g_ExpectedArgCount[RUN_BASIC] = 0;
	g_ExpectedArgCount[RUN_ARGS] = 2;

	PrintModule("ModuleTest", module);

	// Check expected arg count
	if (g_ExpectedArgCount[g_LastRunMode] = module.ArgumentCount) { print("PASS: module.ArgumentCount=%lu\r\n", module.ArgumentCount); }
	else { print("FAIL: module.ArgumentCount=%lu expecting %d\r\n", module.ArgumentCount, g_ExpectedArgCount[g_LastRunMode]); }

	if (module.ArgumentCount > 0)
	{
		// Check argument values
		if (ARG1 = module.Arguments[0]) { print("PASS: module.Arguments[0]=%s\r\n", module.Arguments[0]); }
		else { print("FAIL: module.Arguments[0]=%s expecting %s\r\n", module.Arguments[0], ARG1); }
                                   
		if (ARG2 = module.Arguments[1]) print("PASS: module.Arguments[1]=%s\r\n", module.Arguments[1]);
		else print("FAIL: module.Arguments[1]=%s expecting %s\r\n", module.Arguments[1], ARG2);
       }

	// Check module file path
	if (PATH = module.File) print("PASS: module.File=%s\r\n", PATH);
	else print("FAIL: module.File=%s expecting %s\r\n", module.File, PATH);
       
	// Check module state and result from calling Restart()
	if ("Running" = module.State)
	{
		result = module.Restart();
		if (result = FAILURE) { print("PASS: module.Restart()=%d\r\n", result); }
		else print("FAIL: module.Restart()=%d expecting %d\r\n", result, FAILURE);
	}
	if ("Stopped" = module.State)
	{
		result = module.Restart();
		if (result = SUCCESS) { print("PASS: module.Restart()=%d\r\n", result); }
		else print("FAIL: module.Restart()=%d expecting %d\r\n", result, SUCCESS);
	}

	module.SendData("{\"json\":\"This data sent from S+ to python module reference\"}");
}

//
// Test static methods
//
function MethodTest()
{
	string data[STRING_SIZE];
	string response[STRING_SIZE];

	makestring(data, "{\"splus\":\"Sent from S+ this is a data store test %d\"}", g_Count);

	// Clear previously stored data
	print("\r\nPythonInterface.ClearData(%s)=%d\r\n", g_ID, PythonInterface.ClearData(g_ID));

	// Send data to python module without storing to JsonDb
	print("\r\nPythonInterface.SendData(%s)=%d\r\n", g_ID, PythonInterface.SendData(g_ID, data));

	// Check that JsonDb is still empty
	response = PythonInterface.GetData(g_ID);
	print("PythonInterface.GetData(%s)=%s\r\n", g_ID, response);
                                       
	// Send data to python module and store in JsonDb
	print("\r\nPythonInterface.SendDataStored(%s)=%d\r\n", g_ID, PythonInterface.SendDataStored(g_ID, data));
                                                     
	// Check that JsonDb has stored data
	response = PythonInterface.GetData(g_ID);
	print("PythonInterface.GetData(%s)=%s\r\n", g_ID, response);
}

function Test_()
{
	g_Count = g_Count + 1;

	// Pass reference to last run module
	ModuleTest(g_PythonModule[g_LastRunMode]);
	MethodTest();
}

push Run
{
	Run_(RUN_BASIC);
}

push RunWithArgs
{
	Run_(RUN_ARGS);
}

push Test
{
	Test_();
}

function RegisterDelegates()
{
	// Register to receive data sent by python modules
	RegisterDelegate(PythonInterface, DataReceived, DataReceivedHandler);
}

function Main()
{
	Supported = PythonInterface.Supported;

	RegisterDelegates();

	WaitForInitializationComplete();
}
